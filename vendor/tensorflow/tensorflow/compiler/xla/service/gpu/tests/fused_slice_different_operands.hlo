// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, ptr %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = getelementptr inbounds i8, ptr %[[VAL_3:.*]], i64 0
// CHECK:         %[[VAL_4:.*]] = getelementptr inbounds i8, ptr %[[VAL_5:.*]], i64 0
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, ptr %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = getelementptr inbounds i8, ptr %[[VAL_9:.*]], i64 0
// CHECK:         %[[VAL_10:.*]] = getelementptr inbounds i8, ptr %[[VAL_11:.*]], i64 0
// CHECK:         %[[VAL_12:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_13:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_14:.*]] = mul nuw nsw i32 %[[VAL_12]], 256
// CHECK:         %[[VAL_15:.*]] = add nuw nsw i32 %[[VAL_14]], %[[VAL_13]]
// CHECK:         %[[VAL_16:.*]] = icmp ult i32 %[[VAL_15]], 256
// CHECK:         call void @llvm.assume(i1 %[[VAL_16]])
// CHECK:         %[[VAL_17:.*]] = mul nuw nsw i32 %[[VAL_15]], 4
// CHECK:         %[[VAL_18:.*]] = udiv i32 %[[VAL_17]], 1
// CHECK:         %[[VAL_19:.*]] = add nuw nsw i32 %[[VAL_17]], 1
// CHECK:         %[[VAL_20:.*]] = udiv i32 %[[VAL_19]], 1
// CHECK:         %[[VAL_21:.*]] = add nuw nsw i32 %[[VAL_17]], 2
// CHECK:         %[[VAL_22:.*]] = udiv i32 %[[VAL_21]], 1
// CHECK:         %[[VAL_23:.*]] = add nuw nsw i32 %[[VAL_17]], 3
// CHECK:         %[[VAL_24:.*]] = udiv i32 %[[VAL_23]], 1
// CHECK:         %[[VAL_25:.*]] = icmp ult i32 %[[VAL_17]], 1024
// CHECK:         br i1 %[[VAL_25]], label %[[VAL_26:.*]], label %[[VAL_27:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_28:.*]], %[[VAL_29:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_29]]
// CHECK:         %[[VAL_30:.*]] = add i32 %[[VAL_18]], 0
// CHECK:         br label %[[VAL_31:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_32:.*]]
// CHECK:         %[[VAL_33:.*]] = phi i32 [ 0, %[[VAL_32]] ]
// CHECK:         %[[VAL_34:.*]] = sub nsw i32 %[[VAL_30]], %[[VAL_33]]
// CHECK:         %[[VAL_35:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_34]]
// CHECK:         %[[VAL_36:.*]] = load half, ptr %[[VAL_35]], align 2, !invariant.load !4
// CHECK:         %[[VAL_37:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_34]]
// CHECK:         %[[VAL_38:.*]] = load half, ptr %[[VAL_37]], align 2, !invariant.load !4
// CHECK:         %[[VAL_39:.*]] = fmul half %[[VAL_36]], %[[VAL_38]]
// CHECK:         br label %[[VAL_40:.*]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_41:.*]]
// CHECK:         %[[VAL_42:.*]] = phi i32 [ 1024, %[[VAL_41]] ]
// CHECK:         %[[VAL_43:.*]] = sub nsw i32 %[[VAL_30]], %[[VAL_42]]
// CHECK:         %[[VAL_44:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_4]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_45:.*]] = load half, ptr %[[VAL_44]], align 2, !invariant.load !4
// CHECK:         %[[VAL_46:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_6]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_47:.*]] = load half, ptr %[[VAL_46]], align 2, !invariant.load !4
// CHECK:         %[[VAL_48:.*]] = fadd half %[[VAL_45]], %[[VAL_47]]
// CHECK:         br label %[[VAL_40]]
// CHECK:       concatenate.pivot.1024.:                          ; preds = %[[VAL_26]]
// CHECK:         %[[VAL_49:.*]] = icmp ult i32 %[[VAL_30]], 1024
// CHECK:         br i1 %[[VAL_49]], label %[[VAL_32]], label %[[VAL_41]]
// CHECK:       concatenate.pivot.0.:                             ; preds = %[[VAL_31]]
// CHECK:         br label %[[VAL_50:.*]]
// CHECK:       concatenate.pivot.1024.1:                         ; preds = %[[VAL_31]]
// CHECK:         br label %[[VAL_51:.*]]
// CHECK:       concatenate.7.merge:                              ; preds = %[[VAL_51]], %[[VAL_50]]
// CHECK:         %[[VAL_52:.*]] = phi half [ %[[VAL_39]], %[[VAL_50]] ], [ %[[VAL_48]], %[[VAL_51]] ]
// CHECK:         %[[VAL_53:.*]] = insertvalue { half, half } undef, half %[[VAL_52]], 0
// CHECK:         %[[VAL_54:.*]] = add i32 %[[VAL_18]], 0
// CHECK:         %[[VAL_55:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_54]]
// CHECK:         %[[VAL_56:.*]] = load half, ptr %[[VAL_55]], align 2, !invariant.load !4
// CHECK:         %[[VAL_57:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_54]]
// CHECK:         %[[VAL_58:.*]] = load half, ptr %[[VAL_57]], align 2, !invariant.load !4
// CHECK:         %[[VAL_59:.*]] = fmul half %[[VAL_56]], %[[VAL_58]]
// CHECK:         %[[VAL_60:.*]] = insertvalue { half, half } %[[VAL_53]], half %[[VAL_59]], 1
// CHECK:         %[[VAL_61:.*]] = extractvalue { half, half } %[[VAL_60]], 0
// CHECK:         %[[VAL_62:.*]] = getelementptr inbounds half, ptr %[[VAL_8]], i32 %[[VAL_17]]
// CHECK:         store half %[[VAL_61]], ptr %[[VAL_62]], align 2
// CHECK:         %[[VAL_63:.*]] = extractvalue { half, half } %[[VAL_60]], 1
// CHECK:         %[[VAL_64:.*]] = getelementptr inbounds half, ptr %[[VAL_10]], i32 %[[VAL_17]]
// CHECK:         store half %[[VAL_63]], ptr %[[VAL_64]], align 2
// CHECK:         %[[VAL_65:.*]] = add i32 %[[VAL_20]], 0
// CHECK:         br label %[[VAL_66:.*]]
// CHECK:       concat_index_from_operand_id04:                   ; preds = %[[VAL_67:.*]]
// CHECK:         %[[VAL_68:.*]] = phi i32 [ 0, %[[VAL_67]] ]
// CHECK:         %[[VAL_69:.*]] = sub nsw i32 %[[VAL_65]], %[[VAL_68]]
// CHECK:         %[[VAL_70:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_69]]
// CHECK:         %[[VAL_71:.*]] = load half, ptr %[[VAL_70]], align 2, !invariant.load !4
// CHECK:         %[[VAL_72:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_69]]
// CHECK:         %[[VAL_73:.*]] = load half, ptr %[[VAL_72]], align 2, !invariant.load !4
// CHECK:         %[[VAL_74:.*]] = fmul half %[[VAL_71]], %[[VAL_73]]
// CHECK:         br label %[[VAL_75:.*]]
// CHECK:       concat_index_from_operand_id16:                   ; preds = %[[VAL_76:.*]]
// CHECK:         %[[VAL_77:.*]] = phi i32 [ 1024, %[[VAL_76]] ]
// CHECK:         %[[VAL_78:.*]] = sub nsw i32 %[[VAL_65]], %[[VAL_77]]
// CHECK:         %[[VAL_79:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_4]], i32 0, i32 %[[VAL_78]]
// CHECK:         %[[VAL_80:.*]] = load half, ptr %[[VAL_79]], align 2, !invariant.load !4
// CHECK:         %[[VAL_81:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_6]], i32 0, i32 %[[VAL_78]]
// CHECK:         %[[VAL_82:.*]] = load half, ptr %[[VAL_81]], align 2, !invariant.load !4
// CHECK:         %[[VAL_83:.*]] = fadd half %[[VAL_80]], %[[VAL_82]]
// CHECK:         br label %[[VAL_75]]
// CHECK:       concatenate.pivot.1024.8:                         ; preds = %[[VAL_40]]
// CHECK:         %[[VAL_84:.*]] = icmp ult i32 %[[VAL_65]], 1024
// CHECK:         br i1 %[[VAL_84]], label %[[VAL_67]], label %[[VAL_76]]
// CHECK:       concatenate.pivot.0.9:                            ; preds = %[[VAL_66]]
// CHECK:         br label %[[VAL_85:.*]]
// CHECK:       concatenate.pivot.1024.10:                        ; preds = %[[VAL_66]]
// CHECK:         br label %[[VAL_86:.*]]
// CHECK:       concatenate.7.merge3:                             ; preds = %[[VAL_86]], %[[VAL_85]]
// CHECK:         %[[VAL_87:.*]] = phi half [ %[[VAL_74]], %[[VAL_85]] ], [ %[[VAL_83]], %[[VAL_86]] ]
// CHECK:         %[[VAL_88:.*]] = insertvalue { half, half } undef, half %[[VAL_87]], 0
// CHECK:         %[[VAL_89:.*]] = add i32 %[[VAL_20]], 0
// CHECK:         %[[VAL_90:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_89]]
// CHECK:         %[[VAL_91:.*]] = load half, ptr %[[VAL_90]], align 2, !invariant.load !4
// CHECK:         %[[VAL_92:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_89]]
// CHECK:         %[[VAL_93:.*]] = load half, ptr %[[VAL_92]], align 2, !invariant.load !4
// CHECK:         %[[VAL_94:.*]] = fmul half %[[VAL_91]], %[[VAL_93]]
// CHECK:         %[[VAL_95:.*]] = insertvalue { half, half } %[[VAL_88]], half %[[VAL_94]], 1
// CHECK:         %[[VAL_96:.*]] = extractvalue { half, half } %[[VAL_95]], 0
// CHECK:         %[[VAL_97:.*]] = getelementptr inbounds half, ptr %[[VAL_8]], i32 %[[VAL_19]]
// CHECK:         store half %[[VAL_96]], ptr %[[VAL_97]], align 2
// CHECK:         %[[VAL_98:.*]] = extractvalue { half, half } %[[VAL_95]], 1
// CHECK:         %[[VAL_99:.*]] = getelementptr inbounds half, ptr %[[VAL_10]], i32 %[[VAL_19]]
// CHECK:         store half %[[VAL_98]], ptr %[[VAL_99]], align 2
// CHECK:         %[[VAL_100:.*]] = add i32 %[[VAL_22]], 0
// CHECK:         br label %[[VAL_101:.*]]
// CHECK:       concat_index_from_operand_id013:                  ; preds = %[[VAL_102:.*]]
// CHECK:         %[[VAL_103:.*]] = phi i32 [ 0, %[[VAL_102]] ]
// CHECK:         %[[VAL_104:.*]] = sub nsw i32 %[[VAL_100]], %[[VAL_103]]
// CHECK:         %[[VAL_105:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_104]]
// CHECK:         %[[VAL_106:.*]] = load half, ptr %[[VAL_105]], align 2, !invariant.load !4
// CHECK:         %[[VAL_107:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_104]]
// CHECK:         %[[VAL_108:.*]] = load half, ptr %[[VAL_107]], align 2, !invariant.load !4
// CHECK:         %[[VAL_109:.*]] = fmul half %[[VAL_106]], %[[VAL_108]]
// CHECK:         br label %[[VAL_110:.*]]
// CHECK:       concat_index_from_operand_id115:                  ; preds = %[[VAL_111:.*]]
// CHECK:         %[[VAL_112:.*]] = phi i32 [ 1024, %[[VAL_111]] ]
// CHECK:         %[[VAL_113:.*]] = sub nsw i32 %[[VAL_100]], %[[VAL_112]]
// CHECK:         %[[VAL_114:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_4]], i32 0, i32 %[[VAL_113]]
// CHECK:         %[[VAL_115:.*]] = load half, ptr %[[VAL_114]], align 2, !invariant.load !4
// CHECK:         %[[VAL_116:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_6]], i32 0, i32 %[[VAL_113]]
// CHECK:         %[[VAL_117:.*]] = load half, ptr %[[VAL_116]], align 2, !invariant.load !4
// CHECK:         %[[VAL_118:.*]] = fadd half %[[VAL_115]], %[[VAL_117]]
// CHECK:         br label %[[VAL_110]]
// CHECK:       concatenate.pivot.1024.17:                        ; preds = %[[VAL_75]]
// CHECK:         %[[VAL_119:.*]] = icmp ult i32 %[[VAL_100]], 1024
// CHECK:         br i1 %[[VAL_119]], label %[[VAL_102]], label %[[VAL_111]]
// CHECK:       concatenate.pivot.0.18:                           ; preds = %[[VAL_101]]
// CHECK:         br label %[[VAL_120:.*]]
// CHECK:       concatenate.pivot.1024.19:                        ; preds = %[[VAL_101]]
// CHECK:         br label %[[VAL_121:.*]]
// CHECK:       concatenate.7.merge12:                            ; preds = %[[VAL_121]], %[[VAL_120]]
// CHECK:         %[[VAL_122:.*]] = phi half [ %[[VAL_109]], %[[VAL_120]] ], [ %[[VAL_118]], %[[VAL_121]] ]
// CHECK:         %[[VAL_123:.*]] = insertvalue { half, half } undef, half %[[VAL_122]], 0
// CHECK:         %[[VAL_124:.*]] = add i32 %[[VAL_22]], 0
// CHECK:         %[[VAL_125:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_124]]
// CHECK:         %[[VAL_126:.*]] = load half, ptr %[[VAL_125]], align 2, !invariant.load !4
// CHECK:         %[[VAL_127:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_124]]
// CHECK:         %[[VAL_128:.*]] = load half, ptr %[[VAL_127]], align 2, !invariant.load !4
// CHECK:         %[[VAL_129:.*]] = fmul half %[[VAL_126]], %[[VAL_128]]
// CHECK:         %[[VAL_130:.*]] = insertvalue { half, half } %[[VAL_123]], half %[[VAL_129]], 1
// CHECK:         %[[VAL_131:.*]] = extractvalue { half, half } %[[VAL_130]], 0
// CHECK:         %[[VAL_132:.*]] = getelementptr inbounds half, ptr %[[VAL_8]], i32 %[[VAL_21]]
// CHECK:         store half %[[VAL_131]], ptr %[[VAL_132]], align 2
// CHECK:         %[[VAL_133:.*]] = extractvalue { half, half } %[[VAL_130]], 1
// CHECK:         %[[VAL_134:.*]] = getelementptr inbounds half, ptr %[[VAL_10]], i32 %[[VAL_21]]
// CHECK:         store half %[[VAL_133]], ptr %[[VAL_134]], align 2
// CHECK:         %[[VAL_135:.*]] = add i32 %[[VAL_24]], 0
// CHECK:         br label %[[VAL_136:.*]]
// CHECK:       concat_index_from_operand_id022:                  ; preds = %[[VAL_137:.*]]
// CHECK:         %[[VAL_138:.*]] = phi i32 [ 0, %[[VAL_137]] ]
// CHECK:         %[[VAL_139:.*]] = sub nsw i32 %[[VAL_135]], %[[VAL_138]]
// CHECK:         %[[VAL_140:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_139]]
// CHECK:         %[[VAL_141:.*]] = load half, ptr %[[VAL_140]], align 2, !invariant.load !4
// CHECK:         %[[VAL_142:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_139]]
// CHECK:         %[[VAL_143:.*]] = load half, ptr %[[VAL_142]], align 2, !invariant.load !4
// CHECK:         %[[VAL_144:.*]] = fmul half %[[VAL_141]], %[[VAL_143]]
// CHECK:         br label %[[VAL_28]]
// CHECK:       concat_index_from_operand_id124:                  ; preds = %[[VAL_145:.*]]
// CHECK:         %[[VAL_146:.*]] = phi i32 [ 1024, %[[VAL_145]] ]
// CHECK:         %[[VAL_147:.*]] = sub nsw i32 %[[VAL_135]], %[[VAL_146]]
// CHECK:         %[[VAL_148:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_4]], i32 0, i32 %[[VAL_147]]
// CHECK:         %[[VAL_149:.*]] = load half, ptr %[[VAL_148]], align 2, !invariant.load !4
// CHECK:         %[[VAL_150:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_6]], i32 0, i32 %[[VAL_147]]
// CHECK:         %[[VAL_151:.*]] = load half, ptr %[[VAL_150]], align 2, !invariant.load !4
// CHECK:         %[[VAL_152:.*]] = fadd half %[[VAL_149]], %[[VAL_151]]
// CHECK:         br label %[[VAL_28]]
// CHECK:       concatenate.pivot.1024.26:                        ; preds = %[[VAL_110]]
// CHECK:         %[[VAL_153:.*]] = icmp ult i32 %[[VAL_135]], 1024
// CHECK:         br i1 %[[VAL_153]], label %[[VAL_137]], label %[[VAL_145]]
// CHECK:       concatenate.pivot.0.27:                           ; preds = %[[VAL_136]]
// CHECK:         br label %[[VAL_154:.*]]
// CHECK:       concatenate.pivot.1024.28:                        ; preds = %[[VAL_136]]
// CHECK:         br label %[[VAL_155:.*]]
// CHECK:       concatenate.7.merge21:                            ; preds = %[[VAL_155]], %[[VAL_154]]
// CHECK:         %[[VAL_156:.*]] = phi half [ %[[VAL_144]], %[[VAL_154]] ], [ %[[VAL_152]], %[[VAL_155]] ]
// CHECK:         %[[VAL_157:.*]] = insertvalue { half, half } undef, half %[[VAL_156]], 0
// CHECK:         %[[VAL_158:.*]] = add i32 %[[VAL_24]], 0
// CHECK:         %[[VAL_159:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_0]], i32 0, i32 %[[VAL_158]]
// CHECK:         %[[VAL_160:.*]] = load half, ptr %[[VAL_159]], align 2, !invariant.load !4
// CHECK:         %[[VAL_161:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_2]], i32 0, i32 %[[VAL_158]]
// CHECK:         %[[VAL_162:.*]] = load half, ptr %[[VAL_161]], align 2, !invariant.load !4
// CHECK:         %[[VAL_163:.*]] = fmul half %[[VAL_160]], %[[VAL_162]]
// CHECK:         %[[VAL_164:.*]] = insertvalue { half, half } %[[VAL_157]], half %[[VAL_163]], 1
// CHECK:         %[[VAL_165:.*]] = extractvalue { half, half } %[[VAL_164]], 0
// CHECK:         %[[VAL_166:.*]] = getelementptr inbounds half, ptr %[[VAL_8]], i32 %[[VAL_23]]
// CHECK:         store half %[[VAL_165]], ptr %[[VAL_166]], align 2
// CHECK:         %[[VAL_167:.*]] = extractvalue { half, half } %[[VAL_164]], 1
// CHECK:         %[[VAL_168:.*]] = getelementptr inbounds half, ptr %[[VAL_10]], i32 %[[VAL_23]]
// CHECK:         store half %[[VAL_167]], ptr %[[VAL_168]], align 2
// CHECK:         br label %[[VAL_27]]

HloModule input_fusion_with_a_tuple_of_slices

fused_computation {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  mul.1 = f16[1024]{0} multiply(arg.1, arg.2)
  add.1 = f16[1023]{0} add(arg.3, arg.4)
  concat.1 = f16[2047]{0} concatenate(mul.1, add.1), dimensions={0}
  slice.1 = f16[1024]{0} slice(concat.1), slice={[0:1024]}
  slice.2 = f16[1024]{0} slice(mul.1), slice={[0:1024]}
  ROOT tuple.1 = (f16[1024]{0}, f16[1024]{0}) tuple(slice.1, slice.2)
}

ENTRY kernel_entry {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  ROOT fusion = (f16[1024]{0}, f16[1024]{0})
      fusion(arg.1, arg.2, arg.3, arg.4), kind=kLoop, calls=fused_computation
}

