// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK:       define{{( amdgpu_kernel)?}} void @wrapped_scatter
// CHECK:         %[[VAL_70:.*]] = alloca i32, align 4
// CHECK-PTX:     %[[VAL_71:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_71:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK-PTX:     %[[VAL_72:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_72:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_73:.*]] = mul nuw nsw i32 %[[VAL_71]], 6
// CHECK:         %[[VAL_74:.*]] = add nuw nsw i32 %[[VAL_73]], %[[VAL_72]]
// CHECK:         %[[VAL_75:.*]] = icmp ult i32 %[[VAL_74]], 6
// CHECK:         call void @llvm.assume(i1 %[[VAL_75]])
// CHECK:         %[[VAL_76:.*]] = add nuw nsw i32 %[[VAL_74]], 0
// CHECK:         %[[VAL_77:.*]] = udiv i32 %[[VAL_76]], 1
// CHECK:         %[[VAL_78:.*]] = urem i32 %[[VAL_77]], 3
// CHECK:         %[[VAL_79:.*]] = udiv i32 %[[VAL_76]], 3
// CHECK:         %[[VAL_80:.*]] = icmp ult i32 %[[VAL_74]], 6
// CHECK:         br i1 %[[VAL_80]], label %[[VAL_81:.*]], label %[[VAL_82:.*]]
// CHECK:       scatter.in_bounds-after:                          ; preds = %[[VAL_83:.*]], %[[VAL_84:.*]]
// CHECK:         ret void
// CHECK:       scatter.in_bounds-true:                           ; preds = %[[VAL_84]]
// CHECK:         %[[VAL_85:.*]] = getelementptr inbounds [2 x i32], ptr %[[VAL_86:.*]], i32 0, i32 %[[VAL_79]]
// CHECK:         %[[VAL_87:.*]] = load i32, ptr %[[VAL_85]], align 4, !invariant.load
// CHECK:         %[[VAL_88:.*]] = add i32 0, %[[VAL_87]]
// CHECK:         %[[VAL_89:.*]] = icmp ult i32 %[[VAL_87]], 3
// CHECK:         %[[VAL_90:.*]] = and i1 true, %[[VAL_89]]
// CHECK:         br i1 %[[VAL_90]], label %[[VAL_91:.*]], label %[[VAL_83]]
// CHECK:       scatter.in_bounds-after3:                         ; preds = %[[VAL_91]], %[[VAL_81]]
// CHECK:         br label %[[VAL_82]]
// CHECK:       scatter.in_bounds-true2:                          ; preds = %[[VAL_81]]
// CHECK:         %[[VAL_92:.*]] = getelementptr inbounds [3 x [3 x i32]], ptr %[[VAL_93:.*]], i32 0, i32 %[[VAL_88]], i32 %[[VAL_78]]
// CHECK:         %[[VAL_94:.*]] = getelementptr i32, ptr %[[VAL_95:.*]], i32 %[[VAL_74]]
// CHECK:         %[[VAL_96:.*]] = getelementptr inbounds i32, ptr %[[VAL_94]], i32 0
// CHECK:         %[[VAL_97:.*]] = load i32, ptr %[[VAL_96]], align 4, !invariant.load
// CHECK-PTX:     store i32 %[[VAL_97]], ptr %[[VAL_70]], align 4
// CHECK-GCN:     store i32 %[[VAL_97]], ptr addrspace(5) %[[VAL_70]], align 4
// CHECK-PTX:     %[[VAL_98:.*]] = load i32, ptr %[[VAL_70]], align 4
// CHECK-GCN:     %[[VAL_98:.*]] = load i32, ptr addrspace(5) %[[VAL_70]], align 4
// CHECK:         store atomic i32 %[[VAL_98]], ptr %[[VAL_92]] unordered, align 4
// CHECK:         br label %[[VAL_83]]

HloModule TensorFlowScatterV1, is_scheduled=true

update_s32 (lhs: s32[], rhs: s32[]) -> s32[] {
  lhs = s32[] parameter(0)
  ROOT rhs = s32[] parameter(1)
}

fused_computation {
  param_0 = s32[3,3]{1,0} parameter(0)
  ROOT operand.1 = s32[3,3]{1,0} add(s32[3,3]{1,0} param_0, s32[3,3]{1,0} param_0)
}

fused_computation.1 {
  param_0.1 = s32[2]{0} parameter(0)
  ROOT indices.1 = s32[2]{0} add(s32[2]{0} param_0.1, s32[2]{0} param_0.1)
}

fused_computation.2 {
  param_0.2 = s32[2,3]{1,0} parameter(0)
  ROOT updates.1 = s32[2,3]{1,0} add(s32[2,3]{1,0} param_0.2, s32[2,3]{1,0} param_0.2)
}

fused_computation.3 {
  operand = s32[3,3]{1,0} parameter(0)
  indices = s32[2]{0} parameter(1)
  updates = s32[2,3]{1,0} parameter(2)
  ROOT scatter = s32[3,3] scatter(operand, indices, updates),
      to_apply=update_s32,
      update_window_dims={1},
      inserted_window_dims={0},
      scatter_dims_to_operand_dims={0},
      index_vector_dim=1
}

ENTRY main {
  p1 = s32[2] parameter(1)
  wrapped_indices = s32[2]{0} fusion(s32[2]{0} p1), kind=kLoop, calls=fused_computation.1
  p2 = s32[2,3] parameter(2)
  wrapped_updates = s32[2,3]{1,0} fusion(s32[2,3]{1,0} p2), kind=kLoop, calls=fused_computation.2
  p0 = s32[3,3] parameter(0)
  wrapped_operand = s32[3,3]{1,0} fusion(s32[3,3]{1,0} p0), kind=kLoop, calls=fused_computation
  ROOT wrapped_scatter = s32[3,3] fusion(wrapped_operand, wrapped_indices, wrapped_updates), kind=kInput, calls=fused_computation.3
}
