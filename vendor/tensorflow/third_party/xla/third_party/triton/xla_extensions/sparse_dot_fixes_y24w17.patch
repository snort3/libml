diff --git a/lib/Dialect/TritonGPU/Transforms/AccelerateMatmul.cpp b/lib/Dialect/TritonGPU/Transforms/AccelerateMatmul.cpp
index 0516fc56f..1f27f8a43 100644
--- a/lib/Dialect/TritonGPU/Transforms/AccelerateMatmul.cpp
+++ b/lib/Dialect/TritonGPU/Transforms/AccelerateMatmul.cpp
@@ -142,6 +142,7 @@ class BlockedToMMA : public mlir::RewritePattern {
                 mlir::TypeID::get<arith::ArithDialect>());
   }
 
+public:
   // Finds the first different bitwidth in the chain of shape-preserving
   // unary ops that x depends on.
   // There are two primary scenarios:
@@ -175,7 +176,6 @@ class BlockedToMMA : public mlir::RewritePattern {
     return origBitWidth;
   }
 
-public:
   BlockedToMMA(mlir::MLIRContext *context, int computeCapability)
       : mlir::RewritePattern(tt::DotOp::getOperationName(), 2, context),
         computeCapability(computeCapability) {}
@@ -389,18 +389,22 @@ class SparseBlockedToMMA : public mlir::RewritePattern {
                                                         newRetType, oldAcc);
 
     if (versionMajor == 2) {
+      int minBitwidth = std::min(BlockedToMMA::computeOrigBitWidth(a),
+                                 BlockedToMMA::computeOrigBitWidth(b));
+      int kWidth = 32 / minBitwidth;
+
       // convert A operand
       auto oldAType = cast<RankedTensorType>(a.getType());
-      auto newAEncoding = ttg::DotOperandEncodingAttr::get(
-          ctx, 0, mmaEnc, oldAType.getElementType());
+      auto newAEncoding =
+          ttg::DotOperandEncodingAttr::get(ctx, 0, mmaEnc, kWidth);
       auto newAType = RankedTensorType::get(
           oldAType.getShape(), oldAType.getElementType(), newAEncoding);
       a = rewriter.create<ttg::ConvertLayoutOp>(a.getLoc(), newAType, a);
 
       // convert B operand
       auto oldBType = cast<RankedTensorType>(b.getType());
-      auto newBEncoding = ttg::DotOperandEncodingAttr::get(
-          ctx, 1, mmaEnc, oldBType.getElementType());
+      auto newBEncoding =
+          ttg::DotOperandEncodingAttr::get(ctx, 1, mmaEnc, kWidth);
       auto newBType = RankedTensorType::get(
           oldBType.getShape(), oldBType.getElementType(), newBEncoding);
       b = rewriter.create<ttg::ConvertLayoutOp>(b.getLoc(), newBType, b);
diff --git a/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ConvertLayoutOpToLLVM/SharedToSparseDotOperand.cpp b/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ConvertLayoutOpToLLVM/SharedToSparseDotOperand.cpp
index 3011cf73d..ea587dced 100644
--- a/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ConvertLayoutOpToLLVM/SharedToSparseDotOperand.cpp
+++ b/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ConvertLayoutOpToLLVM/SharedToSparseDotOperand.cpp
@@ -22,16 +22,16 @@ Value convertLayout(
   // Calculate tile size as number of mask elements (4xi4).
   NvidiaMmaEncodingAttr mmaLayout =
       cast<NvidiaMmaEncodingAttr>(sparseEncoding.getParent());
+  SmallVector<unsigned> warpsPerCTA = mmaLayout.getWarpsPerCTA();
   SmallVector<unsigned> shapePerCTATile = {
-      kTileSize * mmaLayout.getWarpsPerCTA()[0],
-      kTileSize / kMetadataElementsPerPackedValue};
+      kTileSize * warpsPerCTA[0], kTileSize / kMetadataElementsPerPackedValue};
   Value strideM = smemObj.strides[0];
   Value strideK = smemObj.strides[1];
 
   // Calculate offset in the tile for the current thread.
   Value threadsPerWarp = i32_val(kThreadsPerWarp);
   Value warpId = udiv(thread, threadsPerWarp);
-  Value warpGroupId = urem(warpId, i32_val(shapePerCTATile[0] / kTileSize));
+  Value warpGroupId = udiv(warpId, i32_val(warpsPerCTA[1]));
   Value laneId = urem(thread, threadsPerWarp);
   Value laneGroupId = udiv(laneId, i32_val(kThreadsInGroup));
   Value columnId = urem(laneId, i32_val(shapePerCTATile[1]));
