// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATASCHEMA_LIBML_H_
#define FLATBUFFERS_GENERATED_METADATASCHEMA_LIBML_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace libml {

struct Metadata;
struct MetadataBuilder;

struct Metadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOWERCASE = 4
  };
  bool lowercase() const {
    return GetField<uint8_t>(VT_LOWERCASE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_LOWERCASE, 1) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lowercase(bool lowercase) {
    fbb_.AddElement<uint8_t>(Metadata::VT_LOWERCASE, static_cast<uint8_t>(lowercase), 0);
  }
  explicit MetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Metadata> CreateMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool lowercase = false) {
  MetadataBuilder builder_(_fbb);
  builder_.add_lowercase(lowercase);
  return builder_.Finish();
}

inline const libml::Metadata *GetMetadata(const void *buf) {
  return ::flatbuffers::GetRoot<libml::Metadata>(buf);
}

inline const libml::Metadata *GetSizePrefixedMetadata(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<libml::Metadata>(buf);
}

inline bool VerifyMetadataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<libml::Metadata>(nullptr);
}

inline bool VerifySizePrefixedMetadataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<libml::Metadata>(nullptr);
}

inline void FinishMetadataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<libml::Metadata> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMetadataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<libml::Metadata> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace libml

#endif  // FLATBUFFERS_GENERATED_METADATASCHEMA_LIBML_H_
